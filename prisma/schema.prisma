// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  ADMIN
  BRAND
  INFLUENCER
}

enum SubscriptionPlan {
  FREE
  BASIC
  PREMIUM
  ENTERPRISE
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum EventStatus {
  DRAFT
  PUBLISHED
  CLOSED
  CANCELLED
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(INFLUENCER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Profile relations based on role
  brandProfile      BrandProfile?
  influencerProfile InfluencerProfile?
  
  // Related entities
  events            Event[]
  messages          Message[]          @relation("MessageSender")
  receivedMessages  Message[]          @relation("MessageReceiver")
  interests         EventInterest[]
  accounts          Account[]
  sessions          Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model BrandProfile {
  id            String          @id @default(cuid())
  userId        String          @unique
  companyName   String
  website       String?
  logo          String?
  description   String?
  industry      String?
  location      String?
  subscription  SubscriptionPlan @default(FREE)
  subscriptionId String?
  subscriptionStartDate DateTime?
  subscriptionEndDate   DateTime?
  
  // Relations
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model InfluencerProfile {
  id                String          @id @default(cuid())
  userId            String          @unique
  nickname          String?
  bio               String?
  categories        String[]
  instagramUrl      String?
  tiktokUrl         String?
  youtubeUrl        String?
  facebookUrl       String?
  twitterUrl        String?
  audienceSize      Int?
  approvalStatus    ApprovalStatus  @default(PENDING)
  approvedAt        DateTime?
  rejectionReason   String?
  
  // Relations
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  interests         EventInterest[]
}

model Event {
  id              String        @id @default(cuid())
  createdById     String
  title           String
  description     String
  requirements    String?
  compensation    String?
  deadline        DateTime?
  startDate       DateTime?
  endDate         DateTime?
  location        String?
  status          EventStatus   @default(DRAFT)
  maxInfluencers  Int?
  minFollowers    Int?
  categories      String[]
  images          String[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relations
  createdBy       User          @relation(fields: [createdById], references: [id], onDelete: Cascade)
  interests       EventInterest[]
}

model EventInterest {
  id              String    @id @default(cuid())
  eventId         String
  influencerId    String
  userId          String
  message         String?
  approved        Boolean   @default(false)
  createdAt       DateTime  @default(now())
  
  // Relations
  event           Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  influencer      InfluencerProfile @relation(fields: [influencerId], references: [id], onDelete: Cascade)
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, influencerId])
}

model Message {
  id              String    @id @default(cuid())
  senderId        String
  receiverId      String
  content         String
  read            Boolean   @default(false)
  createdAt       DateTime  @default(now())
  
  // Relations
  sender          User      @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver        User      @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
}

model Subscription {
  id              String    @id @default(cuid())
  name            SubscriptionPlan
  price           Float
  description     String
  features        String[]
  active          Boolean   @default(true)
}
